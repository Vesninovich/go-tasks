// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Dimas",
            "url": "https://github.com/Vesninovich",
            "email": "dmitry@vesnin.work"
        },
        "license": {
            "name": "ISC",
            "url": "https://www.isc.org/licenses/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/order": {
            "get": {
                "description": "get order by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "get order",
                "parameters": [
                    {
                        "description": "order id",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/orders.OrderID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "requested order",
                        "schema": {
                            "$ref": "#/definitions/orders.Order"
                        }
                    },
                    "400": {
                        "description": "malformed id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "requested order not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "place new book order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "place order",
                "parameters": [
                    {
                        "description": "order data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/orders.OrderCreateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "created order",
                        "schema": {
                            "$ref": "#/definitions/orders.Order"
                        }
                    },
                    "400": {
                        "description": "malformed book id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "requested book not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "orders.Order": {
            "type": "object",
            "properties": {
                "book": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "orders.OrderCreateDTO": {
            "type": "object",
            "properties": {
                "book": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "orders.OrderID": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "description": "Requesting and placing orders",
            "name": "Order"
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0",
	Host:        "localhost:8002",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Book Store Orders Service",
	Description: "Service for placing and reading book orders",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
