// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Dimas",
            "url": "https://github.com/Vesninovich",
            "email": "dmitry@vesnin.work"
        },
        "license": {
            "name": "ISC",
            "url": "https://www.isc.org/licenses/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/book": {
            "get": {
                "description": "get books according to query\nif book ID is provided, only this book is returned (obviously)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/x-json-stream"
                ],
                "tags": [
                    "Book"
                ],
                "summary": "query books",
                "parameters": [
                    {
                        "description": "book query",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/catalog.BooksQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "books found according to query",
                        "schema": {
                            "$ref": "#/definitions/catalog.Book"
                        }
                    },
                    "400": {
                        "description": "bad query, e. g. malformed uuid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "add new book to catalog\nif nested objects are new (that is, they do not have an ID yet), they are created\nif nested object has ID and it is not found, returns 404",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Book"
                ],
                "summary": "create book",
                "parameters": [
                    {
                        "description": "book data",
                        "name": "book",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/catalog.BookCreateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "created book",
                        "schema": {
                            "$ref": "#/definitions/catalog.Book"
                        }
                    },
                    "400": {
                        "description": "bad data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "some data in book not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "catalog.Author": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "catalog.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/catalog.Author"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/catalog.Category"
                    }
                },
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "catalog.BookCreateDTO": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/catalog.Author"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/catalog.Category"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "catalog.BooksQuery": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "count": {
                    "type": "integer"
                },
                "from": {
                    "type": "integer"
                },
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "catalog.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "description": "Quering and creating books",
            "name": "Book"
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0",
	Host:        "localhost:8001",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Book Store Catalog Service",
	Description: "Service for creating and quering books catalog",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
