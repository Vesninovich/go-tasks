// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	GetBooks(ctx context.Context, in *BooksQuery, opts ...grpc.CallOption) (Catalog_GetBooksClient, error)
	CreateBook(ctx context.Context, in *BookCreateDTO, opts ...grpc.CallOption) (*Book, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GetBooks(ctx context.Context, in *BooksQuery, opts ...grpc.CallOption) (Catalog_GetBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Catalog_ServiceDesc.Streams[0], "/catalog.Catalog/GetBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogGetBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Catalog_GetBooksClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type catalogGetBooksClient struct {
	grpc.ClientStream
}

func (x *catalogGetBooksClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogClient) CreateBook(ctx context.Context, in *BookCreateDTO, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/catalog.Catalog/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	GetBooks(*BooksQuery, Catalog_GetBooksServer) error
	CreateBook(context.Context, *BookCreateDTO) (*Book, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) GetBooks(*BooksQuery, Catalog_GetBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedCatalogServer) CreateBook(context.Context, *BookCreateDTO) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GetBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BooksQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServer).GetBooks(m, &catalogGetBooksServer{stream})
}

type Catalog_GetBooksServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type catalogGetBooksServer struct {
	grpc.ServerStream
}

func (x *catalogGetBooksServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _Catalog_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCreateDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.Catalog/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateBook(ctx, req.(*BookCreateDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _Catalog_CreateBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBooks",
			Handler:       _Catalog_GetBooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "catalog/catalog.proto",
}
